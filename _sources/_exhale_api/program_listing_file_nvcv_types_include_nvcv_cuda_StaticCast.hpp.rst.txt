
.. _program_listing_file_nvcv_types_include_nvcv_cuda_StaticCast.hpp:

Program Listing for File StaticCast.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_nvcv_types_include_nvcv_cuda_StaticCast.hpp>` (``nvcv_types/include/nvcv/cuda/StaticCast.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef NVCV_CUDA_STATIC_CAST_HPP
   #define NVCV_CUDA_STATIC_CAST_HPP
   
   #include "TypeTraits.hpp" // for Require, etc.
   
   namespace nvcv::cuda {
   
   template<typename T, typename U, class = Require<HasTypeTraits<T, U> && !IsCompound<T>>>
   __host__ __device__ auto StaticCast(U u)
   {
       using RT = ConvertBaseTypeTo<T, U>;
       if constexpr (std::is_same_v<U, RT>)
       {
           return u;
       }
       else
       {
           RT out{};
   
   #pragma unroll
           for (int e = 0; e < NumElements<RT>; ++e)
           {
               GetElement(out, e) = static_cast<T>(GetElement(u, e));
           }
   
           return out;
       }
   }
   
   } // namespace nvcv::cuda
   
   #endif // NVCV_CUDA_STATIC_CAST_HPP
