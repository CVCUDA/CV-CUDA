
.. _program_listing_file_cvcuda_include_cvcuda_OpNormalize.h:

Program Listing for File OpNormalize.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_cvcuda_include_cvcuda_OpNormalize.h>` (``cvcuda/include/cvcuda/OpNormalize.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   out[data_idx] = (in[data_idx] - mean[param_idx]) * m * global_scale + shift
   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef CVCUDA_NORMALIZE_H
   #define CVCUDA_NORMALIZE_H
   
   #include "Operator.h"
   #include "detail/Export.h"
   
   #include <cuda_runtime.h>
   #include <nvcv/ImageBatch.h>
   #include <nvcv/Status.h>
   #include <nvcv/Tensor.h>
   
   #ifdef __cplusplus
   extern "C"
   {
   #endif
   
   // @brief Flag to be used by normalize operation to indicate scale is standard deviation instead.
   #define CVCUDA_NORMALIZE_SCALE_IS_STDDEV (1 << 0)
   
   CVCUDA_PUBLIC NVCVStatus cvcudaNormalizeCreate(NVCVOperatorHandle *handle);
   
   CVCUDA_PUBLIC NVCVStatus cvcudaNormalizeSubmit(NVCVOperatorHandle handle, cudaStream_t stream, NVCVTensorHandle in,
                                                  NVCVTensorHandle base, NVCVTensorHandle scale, NVCVTensorHandle out,
                                                  float global_scale, float shift, float epsilon, uint32_t flags);
   
   CVCUDA_PUBLIC NVCVStatus cvcudaNormalizeVarShapeSubmit(NVCVOperatorHandle handle, cudaStream_t stream,
                                                          NVCVImageBatchHandle in, NVCVTensorHandle base,
                                                          NVCVTensorHandle scale, NVCVImageBatchHandle out,
                                                          float global_scale, float shift, float epsilon, uint32_t flags);
   #ifdef __cplusplus
   }
   #endif
   
   #endif /* CVCUDA_NORMALIZE_H */
