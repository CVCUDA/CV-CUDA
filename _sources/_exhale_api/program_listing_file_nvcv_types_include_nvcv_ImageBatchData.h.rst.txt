
.. _program_listing_file_nvcv_types_include_nvcv_ImageBatchData.h:

Program Listing for File ImageBatchData.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_nvcv_types_include_nvcv_ImageBatchData.h>` (``nvcv_types/include/nvcv/ImageBatchData.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef NVCV_IMAGEBATCHDATA_H
   #define NVCV_IMAGEBATCHDATA_H
   
   #include "ImageData.h"
   
   #include <nvcv/ImageFormat.h>
   
   typedef struct NVCVImageBatchVarShapeBufferStridedRec
   {
       NVCVImageFormat uniqueFormat;
   
       int32_t maxWidth, maxHeight;
   
       NVCVImageFormat *formatList;
   
       const NVCVImageFormat *hostFormatList;
   
       NVCVImageBufferStrided *imageList;
   } NVCVImageBatchVarShapeBufferStrided;
   
   typedef struct NVCVImageBatchTensorBufferStridedRec
   {
       int64_t imgStride;
   
       int32_t rowStride;
   
       int32_t imgWidth, imgHeight;
   
       void *planeBuffer[NVCV_MAX_PLANE_COUNT];
   } NVCVImageBatchTensorBufferStrided;
   
   typedef enum
   {
       NVCV_IMAGE_BATCH_BUFFER_NONE = 0,
   
       NVCV_IMAGE_BATCH_VARSHAPE_BUFFER_STRIDED_CUDA,
   } NVCVImageBatchBufferType;
   
   typedef union NVCVImageBatchBufferRec
   {
       NVCVImageBatchVarShapeBufferStrided varShapeStrided;
   } NVCVImageBatchBuffer;
   
   typedef struct NVCVImageBatchDataRec
   {
       int32_t numImages;
   
       NVCVImageBatchBufferType bufferType;
   
       NVCVImageBatchBuffer buffer;
   } NVCVImageBatchData;
   
   #endif // NVCV_IMAGEBATCHDATA_H
